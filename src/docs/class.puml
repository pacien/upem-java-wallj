@startuml

skinparam linetype ortho
skinparam monochrome reverse
skinparam backgroundColor #FFFFFF

class Main{
    static void main(String[])
}
package utils {
  class Matrix {
    static int getWidth(...)
    static int getHeight(...)
    static boolean isShapeValid(...)
  }
}

package viewer {
  class Viewer {
    final Game
    Viewer(List<Board>)
    void eventLoop(ApplicationContext)
    void renderFrame(Graphics2D,ApplicationContext,List<Event>)
  }
}

package context {
  interface Updateable {
    List<Event> update(Context)
    static List<Event> updateAll(List<Updateable>, Context)
  }

  class Context {
    Context(Game, List<Event>, GraphicsContext)
    Game getGame()
    List<Event> getEvents()
    GraphicsContext getGraphicsContext()
    Duration getTimeDelta()
  }

  class GraphicsContext {
    Graphics2D, ScreenInfo

    paintCircle(Color, Vec2, float)
    paintSquare(Color, Vec2, float, float)
    paintString(Color, Vec2,String)
  }

  class InputHandler {
    ApplicationContext

    InputHandler(ApplicationContext)
    List<Event> getEvents()
  }

  class ScreenManager {
    ApplicationContext, Graphics2D

    ScreenManager(ApplicationContext,Graphics2D)
    GraphicsContext clearScreen()
  }

  class Game implements Updateable {
    Stage
    final List<Controller>
    int indexBoard
    final List<Board>
    bool over

    Game(List<Board>)
    Stage getStage()
    bool isOver()
    void setOver()
    void nextStage()
    void retryStage()
    List<Event> update(Context context)
  }

  class Stage implements Updateable {
    Stage(Board)
    Board getBoard()
    List<Block> getBlocks()
    List<Event> update(Context)
    bool isCleared()
  }
}

package event {
  interface Event

  interface InputEvent implements Event
  interface GameEvent implements Event

  class DropBombEvent implements InputEvent

  class AddBombEvent implements InputEvent {
    final TileVec2
    AddBombEvent(TileVec2)
    TileVec2 getTile()
  }

  class MoveRobotEvent implements InputEvent {
    final TileVec2
    MoveRobotEvent(TileVec2)
    TileVec2 getTile()
  }

  class ConfirmEvent implements InputEvent
  class GameOverEvent implements Event

  class ExplosionEvent implements GameEvent {
    Block source
    Body source
  }
}

package board {
  class Board {
    Board(width, height)
    BlockType getBlockTypeAt(TileVec2)
    BlockType setBlockTypeAt(TileVec2, BlockType)
    Stream<Map.Entry<TileVec2, BlockType>> stream()
  }

  class BoardParser {
    static Board parse(File)
  }

  class BoardValidator {
    static class Constraint

    BoardValidator(Board)
    BoardValidator validate(Predicate<Board>, String error)
    Board get()
  }

  class BoardConverter {
    static Board worldToBoard(List<Block>)
    static List<Block> boardToWorld(Board)
  }

  class TileVec2 {
    static final int TILE_DIM
    static TileVec2 fromVec2(Vec2)

    TileVec2(col, row)
    Vec2 toPixelPos()
    List<TileVec2> neighbors()
  }

  class PathFinder {
    PathFinder(Board)
    List<TileVec2> findPath(TileVec2 origin, TileVec2 target)
  }
}

package block {
  enum BlockType {
    FREE, WALL, TRASH,
    GARBAGE, ROBOT, BOMB

    boolean isBounding()
    boolean mustBeReachable()
    boolean isTraversable()
    boolean isMovableByExplosion()
  }

  class BlockFactory {
    Block build(BlockType, TileVec2)
  }

  abstract class Block implements Updateable {
    Block(BlockType)
    BlockType getType()
    TileVec2 getTile()
    abstract Vec2 getPos()
    abstract void link(World)
  }
  
  abstract class JBoxBlock extends Block {
    JBoxBlock(BlockType, BodyType, Shape, Vec2)
    Vec2 getPos()
    void link(World)
  }
  
  class RobotBlock extends Block {
    Vec2 getPos()
    void link(World world)
    List<Event> update(Context context)
  }

  class WallBlock extends JBoxBlock {
    List<Event> update(Context context)
  }

  class TrashBlock extends JBoxBlock {
    List<Event> update(Context context)
  }

  class BombBlock extends JBoxBlock {
    List<Event> update(Context context)
  }

  class GarbageBlock extends JBoxBlock {
    List<Event> update(Context context)
  }
}

package controller {
  interface Controller extends Updateable

  class GameStateController implements Controller
}

Zen5 ()-- Viewer
Zen5 ()-- Main
Main --> viewer

viewer --> context
viewer --> block

context --> event

block --> controller

board --> block

@enduml
